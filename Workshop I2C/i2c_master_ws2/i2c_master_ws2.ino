#include <Wire.h>// I2C Slave adressen van de workshop.#define PCF8574A_I2C_ADDRESS 0x38#define EEPROM_I2C_ADDRESS   0x57#define DS3231_I2C_ADDRESS   0x68#define ARDUINO_I2C_ADDRESS  0x44// Workshop specifieke defines en globale variabelen hiervoid setup() {  Serial.begin(115200);      // start serial    fdevopen( &my_putc, 0);    // Koppel printf uitvoer (stdout) via my_putc() aan de serial port.  PrintTkMsg();              // print helptekst van I2C Master Toolkit  Wire.begin();              // start I2C   pinMode(8, INPUT_PULLUP);  // universele input pin  // Workshop specifieke setup hier}void loop() {   // Variabelen voor algemeen gebruik (vanaf workshop dag 3)  byte I2cTxBuffer[32];    // zend buffer  byte I2cRxBuffer[32];    // ontvangstbuffer  byte r;                  // return value   // 500 ms lus  static int LusTakt;  int  ms = millis();  if ((ms - LusTakt) > 0) {    LusTakt = ms + 500;  // zet tijd voor volgende interval     // Oefening z  }   // Oefening y  char ch = CGet();  if (ch != 0)  {    // Voer commando uit.    switch(ch) {    case 'a' :       {        // Oefening a        Wire.beginTransmission(0x57);  // slave adres        Wire.write(0);                 // hoge adres-byte        Wire.write(0x1E);              // lage adres-byte        Wire.write('*') ;              // data (0x2A)        Wire.endTransmission();           break;      }    case 'b' :       {        // Oefening b        Wire.beginTransmission(EEPROM_I2C_ADDRESS);          Wire.write(0);                 // hoge adres-byte        Wire.write(0x1E);              // lage adres-byte        Wire.write('*') ;              // data (0x2A)        Wire.write('*') ;              // data (0x2A)        Wire.endTransmission();                  break;      }    case 'c' :       {        // Oefening c - LET OP !!! DIT WERKT NIET ZOALS VERWACHT !!!        Wire.beginTransmission(EEPROM_I2C_ADDRESS);         Wire.write(0);                 // hoge adres-byte        Wire.write(0x1E);              // lage adres-byte        Wire.write('*') ;              // data (0x2A)        Wire.write('*') ;              // data (0x2A)        Wire.write('*') ;              // data (0x2A)        Wire.endTransmission();                  break;      }    case 'd' :       {        // Oefening d - LET OP !!! DIT WERKT NIET ZOALS VERWACHT !!!        // Schrijf laatste 2 bytes van blok        Wire.beginTransmission(EEPROM_I2C_ADDRESS);         Wire.write(0);                 // hoge adres-byte        Wire.write(0x1E);              // lage adres-byte        Wire.write('*') ;              // data (0x2A)        Wire.write('*') ;              // data (0x2A)        Wire.endTransmission();                  // Schrijf 1e byte van volgend blok        Wire.beginTransmission(EEPROM_I2C_ADDRESS);        Wire.write(0);                 // hoge adres-byte        Wire.write(0x20);              // lage adres-byte        Wire.write('*') ;              // data (0x2A)        Wire.endTransmission();            break;            }    case 'e' :       {        // Oefening e - LET OP !!! DIT WERKT NIET ZOALS VERWACHT !!!        // Schrijf laatste 2 bytes van blok        Wire.beginTransmission(EEPROM_I2C_ADDRESS);         Wire.write(0);                 // hoge adres-byte        Wire.write(0x1E);              // lage adres-byte        Wire.write('*') ;              // data (0x2A)        Wire.write('*') ;              // data (0x2A)        r = Wire.endTransmission();                if (r != 0) {          printf("Error: i2c fout1 (%d)\n", r);          break;        }        // Schrijf 1e byte van volgend blok        Wire.beginTransmission(EEPROM_I2C_ADDRESS);         Wire.write(0);                 // hoge adres-byte        Wire.write(0x20);              // lage adres-byte        Wire.write('*') ;              // data (0x2A)        r = Wire.endTransmission();                  if (r != 0) {          printf("Error: i2c fout2 (%d)\n", r);          break;        }        break;      }    case 'f' :       {        // Oefening f        // Schrijf laatste 2 bytes van blok        Wire.beginTransmission(EEPROM_I2C_ADDRESS);          Wire.write(0);                 // hoge adres-byte        Wire.write(0x1E);              // lage adres-byte        Wire.write('*') ;              // data (0x2A)        Wire.write('*') ;              // data (0x2A)        Wire.endTransmission();                  while (AddressProbe(EEPROM_I2C_ADDRESS) == false) {           // Wacht tot slave weer reageert (write cycle afgerond)        }        // Schrijf 1e byte van volgend blok        Wire.beginTransmission(EEPROM_I2C_ADDRESS);         Wire.write(0);                 // hoge adres-byte        Wire.write(0x20);              // lage adres-byte        Wire.write('*') ;              // data (0x2A)        Wire.endTransmission();          			  break;      }    default :       {        printf("Onbekend commando '%c'\n", ch);        return;  // return zodat we geen 'commando uitgevoerd' printen...      }    }    printf("Commmando '%c' uitgevoerd\n", ch);  } }