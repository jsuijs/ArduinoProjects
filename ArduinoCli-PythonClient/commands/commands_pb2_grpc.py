# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from commands import board_pb2 as commands_dot_board__pb2
from commands import commands_pb2 as commands_dot_commands__pb2
from commands import compile_pb2 as commands_dot_compile__pb2
from commands import core_pb2 as commands_dot_core__pb2
from commands import lib_pb2 as commands_dot_lib__pb2
from commands import upload_pb2 as commands_dot_upload__pb2


class ArduinoCoreStub(object):
    """The main Arduino Platform Service
    BOOTSTRAP COMMANDS
    -------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Init = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/Init',
                request_serializer=commands_dot_commands__pb2.InitReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.InitResp.FromString,
                )
        self.Destroy = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/Destroy',
                request_serializer=commands_dot_commands__pb2.DestroyReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.DestroyResp.FromString,
                )
        self.Rescan = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/Rescan',
                request_serializer=commands_dot_commands__pb2.RescanReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.RescanResp.FromString,
                )
        self.UpdateIndex = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/UpdateIndex',
                request_serializer=commands_dot_commands__pb2.UpdateIndexReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.UpdateIndexResp.FromString,
                )
        self.UpdateLibrariesIndex = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/UpdateLibrariesIndex',
                request_serializer=commands_dot_commands__pb2.UpdateLibrariesIndexReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.UpdateLibrariesIndexResp.FromString,
                )
        self.UpdateCoreLibrariesIndex = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/UpdateCoreLibrariesIndex',
                request_serializer=commands_dot_commands__pb2.UpdateCoreLibrariesIndexReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.UpdateCoreLibrariesIndexResp.FromString,
                )
        self.Outdated = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/Outdated',
                request_serializer=commands_dot_commands__pb2.OutdatedReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.OutdatedResp.FromString,
                )
        self.Upgrade = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/Upgrade',
                request_serializer=commands_dot_commands__pb2.UpgradeReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.UpgradeResp.FromString,
                )
        self.Version = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/Version',
                request_serializer=commands_dot_commands__pb2.VersionReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.VersionResp.FromString,
                )
        self.LoadSketch = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/LoadSketch',
                request_serializer=commands_dot_commands__pb2.LoadSketchReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.LoadSketchResp.FromString,
                )
        self.ArchiveSketch = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/ArchiveSketch',
                request_serializer=commands_dot_commands__pb2.ArchiveSketchReq.SerializeToString,
                response_deserializer=commands_dot_commands__pb2.ArchiveSketchResp.FromString,
                )
        self.BoardDetails = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/BoardDetails',
                request_serializer=commands_dot_board__pb2.BoardDetailsReq.SerializeToString,
                response_deserializer=commands_dot_board__pb2.BoardDetailsResp.FromString,
                )
        self.BoardAttach = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/BoardAttach',
                request_serializer=commands_dot_board__pb2.BoardAttachReq.SerializeToString,
                response_deserializer=commands_dot_board__pb2.BoardAttachResp.FromString,
                )
        self.BoardList = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/BoardList',
                request_serializer=commands_dot_board__pb2.BoardListReq.SerializeToString,
                response_deserializer=commands_dot_board__pb2.BoardListResp.FromString,
                )
        self.BoardListAll = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/BoardListAll',
                request_serializer=commands_dot_board__pb2.BoardListAllReq.SerializeToString,
                response_deserializer=commands_dot_board__pb2.BoardListAllResp.FromString,
                )
        self.BoardListWatch = channel.stream_stream(
                '/cc.arduino.cli.commands.ArduinoCore/BoardListWatch',
                request_serializer=commands_dot_board__pb2.BoardListWatchReq.SerializeToString,
                response_deserializer=commands_dot_board__pb2.BoardListWatchResp.FromString,
                )
        self.Compile = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/Compile',
                request_serializer=commands_dot_compile__pb2.CompileReq.SerializeToString,
                response_deserializer=commands_dot_compile__pb2.CompileResp.FromString,
                )
        self.PlatformInstall = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/PlatformInstall',
                request_serializer=commands_dot_core__pb2.PlatformInstallReq.SerializeToString,
                response_deserializer=commands_dot_core__pb2.PlatformInstallResp.FromString,
                )
        self.PlatformDownload = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/PlatformDownload',
                request_serializer=commands_dot_core__pb2.PlatformDownloadReq.SerializeToString,
                response_deserializer=commands_dot_core__pb2.PlatformDownloadResp.FromString,
                )
        self.PlatformUninstall = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/PlatformUninstall',
                request_serializer=commands_dot_core__pb2.PlatformUninstallReq.SerializeToString,
                response_deserializer=commands_dot_core__pb2.PlatformUninstallResp.FromString,
                )
        self.PlatformUpgrade = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/PlatformUpgrade',
                request_serializer=commands_dot_core__pb2.PlatformUpgradeReq.SerializeToString,
                response_deserializer=commands_dot_core__pb2.PlatformUpgradeResp.FromString,
                )
        self.Upload = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/Upload',
                request_serializer=commands_dot_upload__pb2.UploadReq.SerializeToString,
                response_deserializer=commands_dot_upload__pb2.UploadResp.FromString,
                )
        self.UploadUsingProgrammer = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/UploadUsingProgrammer',
                request_serializer=commands_dot_upload__pb2.UploadUsingProgrammerReq.SerializeToString,
                response_deserializer=commands_dot_upload__pb2.UploadUsingProgrammerResp.FromString,
                )
        self.ListProgrammersAvailableForUpload = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/ListProgrammersAvailableForUpload',
                request_serializer=commands_dot_upload__pb2.ListProgrammersAvailableForUploadReq.SerializeToString,
                response_deserializer=commands_dot_upload__pb2.ListProgrammersAvailableForUploadResp.FromString,
                )
        self.BurnBootloader = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/BurnBootloader',
                request_serializer=commands_dot_upload__pb2.BurnBootloaderReq.SerializeToString,
                response_deserializer=commands_dot_upload__pb2.BurnBootloaderResp.FromString,
                )
        self.PlatformSearch = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/PlatformSearch',
                request_serializer=commands_dot_core__pb2.PlatformSearchReq.SerializeToString,
                response_deserializer=commands_dot_core__pb2.PlatformSearchResp.FromString,
                )
        self.PlatformList = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/PlatformList',
                request_serializer=commands_dot_core__pb2.PlatformListReq.SerializeToString,
                response_deserializer=commands_dot_core__pb2.PlatformListResp.FromString,
                )
        self.LibraryDownload = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/LibraryDownload',
                request_serializer=commands_dot_lib__pb2.LibraryDownloadReq.SerializeToString,
                response_deserializer=commands_dot_lib__pb2.LibraryDownloadResp.FromString,
                )
        self.LibraryInstall = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/LibraryInstall',
                request_serializer=commands_dot_lib__pb2.LibraryInstallReq.SerializeToString,
                response_deserializer=commands_dot_lib__pb2.LibraryInstallResp.FromString,
                )
        self.ZipLibraryInstall = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/ZipLibraryInstall',
                request_serializer=commands_dot_lib__pb2.ZipLibraryInstallReq.SerializeToString,
                response_deserializer=commands_dot_lib__pb2.ZipLibraryInstallResp.FromString,
                )
        self.GitLibraryInstall = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/GitLibraryInstall',
                request_serializer=commands_dot_lib__pb2.GitLibraryInstallReq.SerializeToString,
                response_deserializer=commands_dot_lib__pb2.GitLibraryInstallResp.FromString,
                )
        self.LibraryUninstall = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/LibraryUninstall',
                request_serializer=commands_dot_lib__pb2.LibraryUninstallReq.SerializeToString,
                response_deserializer=commands_dot_lib__pb2.LibraryUninstallResp.FromString,
                )
        self.LibraryUpgradeAll = channel.unary_stream(
                '/cc.arduino.cli.commands.ArduinoCore/LibraryUpgradeAll',
                request_serializer=commands_dot_lib__pb2.LibraryUpgradeAllReq.SerializeToString,
                response_deserializer=commands_dot_lib__pb2.LibraryUpgradeAllResp.FromString,
                )
        self.LibraryResolveDependencies = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/LibraryResolveDependencies',
                request_serializer=commands_dot_lib__pb2.LibraryResolveDependenciesReq.SerializeToString,
                response_deserializer=commands_dot_lib__pb2.LibraryResolveDependenciesResp.FromString,
                )
        self.LibrarySearch = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/LibrarySearch',
                request_serializer=commands_dot_lib__pb2.LibrarySearchReq.SerializeToString,
                response_deserializer=commands_dot_lib__pb2.LibrarySearchResp.FromString,
                )
        self.LibraryList = channel.unary_unary(
                '/cc.arduino.cli.commands.ArduinoCore/LibraryList',
                request_serializer=commands_dot_lib__pb2.LibraryListReq.SerializeToString,
                response_deserializer=commands_dot_lib__pb2.LibraryListResp.FromString,
                )


class ArduinoCoreServicer(object):
    """The main Arduino Platform Service
    BOOTSTRAP COMMANDS
    -------------------
    """

    def Init(self, request, context):
        """Start a new instance of the Arduino Core Service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Destroy(self, request, context):
        """Destroy an instance of the Arduino Core Service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rescan(self, request, context):
        """Rescan instance of the Arduino Core Service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateIndex(self, request, context):
        """Update package index of the Arduino Core Service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLibrariesIndex(self, request, context):
        """Update libraries index
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCoreLibrariesIndex(self, request, context):
        """Update packages indexes for both Cores and Libraries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Outdated(self, request, context):
        """Outdated returns a message with a list of outdated Cores and Libraries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upgrade(self, request, context):
        """Upgrade both Cores and Libraries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Version(self, request, context):
        """Get the version of Arduino CLI in use.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadSketch(self, request, context):
        """Returns all files composing a Sketch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ArchiveSketch(self, request, context):
        """Creates a zip file containing all files of specified Sketch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BoardDetails(self, request, context):
        """BOARD COMMANDS
        --------------

        Requests details about a board
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BoardAttach(self, request, context):
        """Attach a board to a sketch. When the `fqbn` field of a request is not
        provided, the FQBN of the attached board will be used.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BoardList(self, request, context):
        """List the boards currently connected to the computer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BoardListAll(self, request, context):
        """List all the boards provided by installed platforms.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BoardListWatch(self, request_iterator, context):
        """List boards connection and disconnected events.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Compile(self, request, context):
        """Compile an Arduino sketch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlatformInstall(self, request, context):
        """Download and install a platform and its tool dependencies.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlatformDownload(self, request, context):
        """Download a platform and its tool dependencies to the `staging/packages`
        subdirectory of the data directory.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlatformUninstall(self, request, context):
        """Uninstall a platform as well as its tool dependencies that are not used by
        other installed platforms.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlatformUpgrade(self, request, context):
        """Upgrade an installed platform to the latest version.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upload(self, request, context):
        """Upload a compiled sketch to a board.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadUsingProgrammer(self, request, context):
        """Upload a compiled sketch to a board using a programmer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProgrammersAvailableForUpload(self, request, context):
        """List programmers available for a board.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BurnBootloader(self, request, context):
        """Burn bootloader to a board.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlatformSearch(self, request, context):
        """Search for a platform in the platforms indexes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlatformList(self, request, context):
        """List all installed platforms.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LibraryDownload(self, request, context):
        """Download the archive file of an Arduino library in the libraries index to
        the staging directory.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LibraryInstall(self, request, context):
        """Download and install an Arduino library from the libraries index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZipLibraryInstall(self, request, context):
        """Install a library from a Zip File 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GitLibraryInstall(self, request, context):
        """Download and install a library from a git url
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LibraryUninstall(self, request, context):
        """Uninstall an Arduino library.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LibraryUpgradeAll(self, request, context):
        """Upgrade all installed Arduino libraries to the newest version available.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LibraryResolveDependencies(self, request, context):
        """List the recursive dependencies of a library, as defined by the `depends`
        field of the library.properties files.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LibrarySearch(self, request, context):
        """Search the Arduino libraries index for libraries.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LibraryList(self, request, context):
        """List the installed libraries.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArduinoCoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Init': grpc.unary_stream_rpc_method_handler(
                    servicer.Init,
                    request_deserializer=commands_dot_commands__pb2.InitReq.FromString,
                    response_serializer=commands_dot_commands__pb2.InitResp.SerializeToString,
            ),
            'Destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.Destroy,
                    request_deserializer=commands_dot_commands__pb2.DestroyReq.FromString,
                    response_serializer=commands_dot_commands__pb2.DestroyResp.SerializeToString,
            ),
            'Rescan': grpc.unary_unary_rpc_method_handler(
                    servicer.Rescan,
                    request_deserializer=commands_dot_commands__pb2.RescanReq.FromString,
                    response_serializer=commands_dot_commands__pb2.RescanResp.SerializeToString,
            ),
            'UpdateIndex': grpc.unary_stream_rpc_method_handler(
                    servicer.UpdateIndex,
                    request_deserializer=commands_dot_commands__pb2.UpdateIndexReq.FromString,
                    response_serializer=commands_dot_commands__pb2.UpdateIndexResp.SerializeToString,
            ),
            'UpdateLibrariesIndex': grpc.unary_stream_rpc_method_handler(
                    servicer.UpdateLibrariesIndex,
                    request_deserializer=commands_dot_commands__pb2.UpdateLibrariesIndexReq.FromString,
                    response_serializer=commands_dot_commands__pb2.UpdateLibrariesIndexResp.SerializeToString,
            ),
            'UpdateCoreLibrariesIndex': grpc.unary_stream_rpc_method_handler(
                    servicer.UpdateCoreLibrariesIndex,
                    request_deserializer=commands_dot_commands__pb2.UpdateCoreLibrariesIndexReq.FromString,
                    response_serializer=commands_dot_commands__pb2.UpdateCoreLibrariesIndexResp.SerializeToString,
            ),
            'Outdated': grpc.unary_unary_rpc_method_handler(
                    servicer.Outdated,
                    request_deserializer=commands_dot_commands__pb2.OutdatedReq.FromString,
                    response_serializer=commands_dot_commands__pb2.OutdatedResp.SerializeToString,
            ),
            'Upgrade': grpc.unary_stream_rpc_method_handler(
                    servicer.Upgrade,
                    request_deserializer=commands_dot_commands__pb2.UpgradeReq.FromString,
                    response_serializer=commands_dot_commands__pb2.UpgradeResp.SerializeToString,
            ),
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=commands_dot_commands__pb2.VersionReq.FromString,
                    response_serializer=commands_dot_commands__pb2.VersionResp.SerializeToString,
            ),
            'LoadSketch': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadSketch,
                    request_deserializer=commands_dot_commands__pb2.LoadSketchReq.FromString,
                    response_serializer=commands_dot_commands__pb2.LoadSketchResp.SerializeToString,
            ),
            'ArchiveSketch': grpc.unary_unary_rpc_method_handler(
                    servicer.ArchiveSketch,
                    request_deserializer=commands_dot_commands__pb2.ArchiveSketchReq.FromString,
                    response_serializer=commands_dot_commands__pb2.ArchiveSketchResp.SerializeToString,
            ),
            'BoardDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.BoardDetails,
                    request_deserializer=commands_dot_board__pb2.BoardDetailsReq.FromString,
                    response_serializer=commands_dot_board__pb2.BoardDetailsResp.SerializeToString,
            ),
            'BoardAttach': grpc.unary_stream_rpc_method_handler(
                    servicer.BoardAttach,
                    request_deserializer=commands_dot_board__pb2.BoardAttachReq.FromString,
                    response_serializer=commands_dot_board__pb2.BoardAttachResp.SerializeToString,
            ),
            'BoardList': grpc.unary_unary_rpc_method_handler(
                    servicer.BoardList,
                    request_deserializer=commands_dot_board__pb2.BoardListReq.FromString,
                    response_serializer=commands_dot_board__pb2.BoardListResp.SerializeToString,
            ),
            'BoardListAll': grpc.unary_unary_rpc_method_handler(
                    servicer.BoardListAll,
                    request_deserializer=commands_dot_board__pb2.BoardListAllReq.FromString,
                    response_serializer=commands_dot_board__pb2.BoardListAllResp.SerializeToString,
            ),
            'BoardListWatch': grpc.stream_stream_rpc_method_handler(
                    servicer.BoardListWatch,
                    request_deserializer=commands_dot_board__pb2.BoardListWatchReq.FromString,
                    response_serializer=commands_dot_board__pb2.BoardListWatchResp.SerializeToString,
            ),
            'Compile': grpc.unary_stream_rpc_method_handler(
                    servicer.Compile,
                    request_deserializer=commands_dot_compile__pb2.CompileReq.FromString,
                    response_serializer=commands_dot_compile__pb2.CompileResp.SerializeToString,
            ),
            'PlatformInstall': grpc.unary_stream_rpc_method_handler(
                    servicer.PlatformInstall,
                    request_deserializer=commands_dot_core__pb2.PlatformInstallReq.FromString,
                    response_serializer=commands_dot_core__pb2.PlatformInstallResp.SerializeToString,
            ),
            'PlatformDownload': grpc.unary_stream_rpc_method_handler(
                    servicer.PlatformDownload,
                    request_deserializer=commands_dot_core__pb2.PlatformDownloadReq.FromString,
                    response_serializer=commands_dot_core__pb2.PlatformDownloadResp.SerializeToString,
            ),
            'PlatformUninstall': grpc.unary_stream_rpc_method_handler(
                    servicer.PlatformUninstall,
                    request_deserializer=commands_dot_core__pb2.PlatformUninstallReq.FromString,
                    response_serializer=commands_dot_core__pb2.PlatformUninstallResp.SerializeToString,
            ),
            'PlatformUpgrade': grpc.unary_stream_rpc_method_handler(
                    servicer.PlatformUpgrade,
                    request_deserializer=commands_dot_core__pb2.PlatformUpgradeReq.FromString,
                    response_serializer=commands_dot_core__pb2.PlatformUpgradeResp.SerializeToString,
            ),
            'Upload': grpc.unary_stream_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=commands_dot_upload__pb2.UploadReq.FromString,
                    response_serializer=commands_dot_upload__pb2.UploadResp.SerializeToString,
            ),
            'UploadUsingProgrammer': grpc.unary_stream_rpc_method_handler(
                    servicer.UploadUsingProgrammer,
                    request_deserializer=commands_dot_upload__pb2.UploadUsingProgrammerReq.FromString,
                    response_serializer=commands_dot_upload__pb2.UploadUsingProgrammerResp.SerializeToString,
            ),
            'ListProgrammersAvailableForUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProgrammersAvailableForUpload,
                    request_deserializer=commands_dot_upload__pb2.ListProgrammersAvailableForUploadReq.FromString,
                    response_serializer=commands_dot_upload__pb2.ListProgrammersAvailableForUploadResp.SerializeToString,
            ),
            'BurnBootloader': grpc.unary_stream_rpc_method_handler(
                    servicer.BurnBootloader,
                    request_deserializer=commands_dot_upload__pb2.BurnBootloaderReq.FromString,
                    response_serializer=commands_dot_upload__pb2.BurnBootloaderResp.SerializeToString,
            ),
            'PlatformSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.PlatformSearch,
                    request_deserializer=commands_dot_core__pb2.PlatformSearchReq.FromString,
                    response_serializer=commands_dot_core__pb2.PlatformSearchResp.SerializeToString,
            ),
            'PlatformList': grpc.unary_unary_rpc_method_handler(
                    servicer.PlatformList,
                    request_deserializer=commands_dot_core__pb2.PlatformListReq.FromString,
                    response_serializer=commands_dot_core__pb2.PlatformListResp.SerializeToString,
            ),
            'LibraryDownload': grpc.unary_stream_rpc_method_handler(
                    servicer.LibraryDownload,
                    request_deserializer=commands_dot_lib__pb2.LibraryDownloadReq.FromString,
                    response_serializer=commands_dot_lib__pb2.LibraryDownloadResp.SerializeToString,
            ),
            'LibraryInstall': grpc.unary_stream_rpc_method_handler(
                    servicer.LibraryInstall,
                    request_deserializer=commands_dot_lib__pb2.LibraryInstallReq.FromString,
                    response_serializer=commands_dot_lib__pb2.LibraryInstallResp.SerializeToString,
            ),
            'ZipLibraryInstall': grpc.unary_stream_rpc_method_handler(
                    servicer.ZipLibraryInstall,
                    request_deserializer=commands_dot_lib__pb2.ZipLibraryInstallReq.FromString,
                    response_serializer=commands_dot_lib__pb2.ZipLibraryInstallResp.SerializeToString,
            ),
            'GitLibraryInstall': grpc.unary_stream_rpc_method_handler(
                    servicer.GitLibraryInstall,
                    request_deserializer=commands_dot_lib__pb2.GitLibraryInstallReq.FromString,
                    response_serializer=commands_dot_lib__pb2.GitLibraryInstallResp.SerializeToString,
            ),
            'LibraryUninstall': grpc.unary_stream_rpc_method_handler(
                    servicer.LibraryUninstall,
                    request_deserializer=commands_dot_lib__pb2.LibraryUninstallReq.FromString,
                    response_serializer=commands_dot_lib__pb2.LibraryUninstallResp.SerializeToString,
            ),
            'LibraryUpgradeAll': grpc.unary_stream_rpc_method_handler(
                    servicer.LibraryUpgradeAll,
                    request_deserializer=commands_dot_lib__pb2.LibraryUpgradeAllReq.FromString,
                    response_serializer=commands_dot_lib__pb2.LibraryUpgradeAllResp.SerializeToString,
            ),
            'LibraryResolveDependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.LibraryResolveDependencies,
                    request_deserializer=commands_dot_lib__pb2.LibraryResolveDependenciesReq.FromString,
                    response_serializer=commands_dot_lib__pb2.LibraryResolveDependenciesResp.SerializeToString,
            ),
            'LibrarySearch': grpc.unary_unary_rpc_method_handler(
                    servicer.LibrarySearch,
                    request_deserializer=commands_dot_lib__pb2.LibrarySearchReq.FromString,
                    response_serializer=commands_dot_lib__pb2.LibrarySearchResp.SerializeToString,
            ),
            'LibraryList': grpc.unary_unary_rpc_method_handler(
                    servicer.LibraryList,
                    request_deserializer=commands_dot_lib__pb2.LibraryListReq.FromString,
                    response_serializer=commands_dot_lib__pb2.LibraryListResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cc.arduino.cli.commands.ArduinoCore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ArduinoCore(object):
    """The main Arduino Platform Service
    BOOTSTRAP COMMANDS
    -------------------
    """

    @staticmethod
    def Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/Init',
            commands_dot_commands__pb2.InitReq.SerializeToString,
            commands_dot_commands__pb2.InitResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/Destroy',
            commands_dot_commands__pb2.DestroyReq.SerializeToString,
            commands_dot_commands__pb2.DestroyResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rescan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/Rescan',
            commands_dot_commands__pb2.RescanReq.SerializeToString,
            commands_dot_commands__pb2.RescanResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/UpdateIndex',
            commands_dot_commands__pb2.UpdateIndexReq.SerializeToString,
            commands_dot_commands__pb2.UpdateIndexResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateLibrariesIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/UpdateLibrariesIndex',
            commands_dot_commands__pb2.UpdateLibrariesIndexReq.SerializeToString,
            commands_dot_commands__pb2.UpdateLibrariesIndexResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCoreLibrariesIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/UpdateCoreLibrariesIndex',
            commands_dot_commands__pb2.UpdateCoreLibrariesIndexReq.SerializeToString,
            commands_dot_commands__pb2.UpdateCoreLibrariesIndexResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Outdated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/Outdated',
            commands_dot_commands__pb2.OutdatedReq.SerializeToString,
            commands_dot_commands__pb2.OutdatedResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Upgrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/Upgrade',
            commands_dot_commands__pb2.UpgradeReq.SerializeToString,
            commands_dot_commands__pb2.UpgradeResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/Version',
            commands_dot_commands__pb2.VersionReq.SerializeToString,
            commands_dot_commands__pb2.VersionResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadSketch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/LoadSketch',
            commands_dot_commands__pb2.LoadSketchReq.SerializeToString,
            commands_dot_commands__pb2.LoadSketchResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ArchiveSketch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/ArchiveSketch',
            commands_dot_commands__pb2.ArchiveSketchReq.SerializeToString,
            commands_dot_commands__pb2.ArchiveSketchResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BoardDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/BoardDetails',
            commands_dot_board__pb2.BoardDetailsReq.SerializeToString,
            commands_dot_board__pb2.BoardDetailsResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BoardAttach(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/BoardAttach',
            commands_dot_board__pb2.BoardAttachReq.SerializeToString,
            commands_dot_board__pb2.BoardAttachResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BoardList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/BoardList',
            commands_dot_board__pb2.BoardListReq.SerializeToString,
            commands_dot_board__pb2.BoardListResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BoardListAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/BoardListAll',
            commands_dot_board__pb2.BoardListAllReq.SerializeToString,
            commands_dot_board__pb2.BoardListAllResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BoardListWatch(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cc.arduino.cli.commands.ArduinoCore/BoardListWatch',
            commands_dot_board__pb2.BoardListWatchReq.SerializeToString,
            commands_dot_board__pb2.BoardListWatchResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Compile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/Compile',
            commands_dot_compile__pb2.CompileReq.SerializeToString,
            commands_dot_compile__pb2.CompileResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlatformInstall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/PlatformInstall',
            commands_dot_core__pb2.PlatformInstallReq.SerializeToString,
            commands_dot_core__pb2.PlatformInstallResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlatformDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/PlatformDownload',
            commands_dot_core__pb2.PlatformDownloadReq.SerializeToString,
            commands_dot_core__pb2.PlatformDownloadResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlatformUninstall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/PlatformUninstall',
            commands_dot_core__pb2.PlatformUninstallReq.SerializeToString,
            commands_dot_core__pb2.PlatformUninstallResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlatformUpgrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/PlatformUpgrade',
            commands_dot_core__pb2.PlatformUpgradeReq.SerializeToString,
            commands_dot_core__pb2.PlatformUpgradeResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Upload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/Upload',
            commands_dot_upload__pb2.UploadReq.SerializeToString,
            commands_dot_upload__pb2.UploadResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadUsingProgrammer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/UploadUsingProgrammer',
            commands_dot_upload__pb2.UploadUsingProgrammerReq.SerializeToString,
            commands_dot_upload__pb2.UploadUsingProgrammerResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListProgrammersAvailableForUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/ListProgrammersAvailableForUpload',
            commands_dot_upload__pb2.ListProgrammersAvailableForUploadReq.SerializeToString,
            commands_dot_upload__pb2.ListProgrammersAvailableForUploadResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BurnBootloader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/BurnBootloader',
            commands_dot_upload__pb2.BurnBootloaderReq.SerializeToString,
            commands_dot_upload__pb2.BurnBootloaderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlatformSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/PlatformSearch',
            commands_dot_core__pb2.PlatformSearchReq.SerializeToString,
            commands_dot_core__pb2.PlatformSearchResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlatformList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/PlatformList',
            commands_dot_core__pb2.PlatformListReq.SerializeToString,
            commands_dot_core__pb2.PlatformListResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LibraryDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/LibraryDownload',
            commands_dot_lib__pb2.LibraryDownloadReq.SerializeToString,
            commands_dot_lib__pb2.LibraryDownloadResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LibraryInstall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/LibraryInstall',
            commands_dot_lib__pb2.LibraryInstallReq.SerializeToString,
            commands_dot_lib__pb2.LibraryInstallResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZipLibraryInstall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/ZipLibraryInstall',
            commands_dot_lib__pb2.ZipLibraryInstallReq.SerializeToString,
            commands_dot_lib__pb2.ZipLibraryInstallResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GitLibraryInstall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/GitLibraryInstall',
            commands_dot_lib__pb2.GitLibraryInstallReq.SerializeToString,
            commands_dot_lib__pb2.GitLibraryInstallResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LibraryUninstall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/LibraryUninstall',
            commands_dot_lib__pb2.LibraryUninstallReq.SerializeToString,
            commands_dot_lib__pb2.LibraryUninstallResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LibraryUpgradeAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cc.arduino.cli.commands.ArduinoCore/LibraryUpgradeAll',
            commands_dot_lib__pb2.LibraryUpgradeAllReq.SerializeToString,
            commands_dot_lib__pb2.LibraryUpgradeAllResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LibraryResolveDependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/LibraryResolveDependencies',
            commands_dot_lib__pb2.LibraryResolveDependenciesReq.SerializeToString,
            commands_dot_lib__pb2.LibraryResolveDependenciesResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LibrarySearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/LibrarySearch',
            commands_dot_lib__pb2.LibrarySearchReq.SerializeToString,
            commands_dot_lib__pb2.LibrarySearchResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LibraryList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.commands.ArduinoCore/LibraryList',
            commands_dot_lib__pb2.LibraryListReq.SerializeToString,
            commands_dot_lib__pb2.LibraryListResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
