# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from debug import debug_pb2 as debug_dot_debug__pb2


class DebugStub(object):
    """Service that abstract a debug Session usage
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Debug = channel.stream_stream(
                '/cc.arduino.cli.debug.Debug/Debug',
                request_serializer=debug_dot_debug__pb2.DebugReq.SerializeToString,
                response_deserializer=debug_dot_debug__pb2.DebugResp.FromString,
                )
        self.GetDebugConfig = channel.unary_unary(
                '/cc.arduino.cli.debug.Debug/GetDebugConfig',
                request_serializer=debug_dot_debug__pb2.DebugConfigReq.SerializeToString,
                response_deserializer=debug_dot_debug__pb2.GetDebugConfigResp.FromString,
                )


class DebugServicer(object):
    """Service that abstract a debug Session usage
    """

    def Debug(self, request_iterator, context):
        """Start a debug session and communicate with the debugger tool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDebugConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DebugServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Debug': grpc.stream_stream_rpc_method_handler(
                    servicer.Debug,
                    request_deserializer=debug_dot_debug__pb2.DebugReq.FromString,
                    response_serializer=debug_dot_debug__pb2.DebugResp.SerializeToString,
            ),
            'GetDebugConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDebugConfig,
                    request_deserializer=debug_dot_debug__pb2.DebugConfigReq.FromString,
                    response_serializer=debug_dot_debug__pb2.GetDebugConfigResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cc.arduino.cli.debug.Debug', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Debug(object):
    """Service that abstract a debug Session usage
    """

    @staticmethod
    def Debug(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cc.arduino.cli.debug.Debug/Debug',
            debug_dot_debug__pb2.DebugReq.SerializeToString,
            debug_dot_debug__pb2.DebugResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDebugConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cc.arduino.cli.debug.Debug/GetDebugConfig',
            debug_dot_debug__pb2.DebugConfigReq.SerializeToString,
            debug_dot_debug__pb2.GetDebugConfigResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
